// <auto-generated />
using System;
using MagicPostApi.Configs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MagicPostApi.Migrations
{
    [DbContext(typeof(WebAPIDataContext))]
    [Migration("20231228133704_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MagicPostApi.Models.Delivery", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FromPointId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ReceiveTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ToPointId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromPointId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ToPointId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("MagicPostApi.Models.Item", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("MagicPostApi.Models.Order", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Cod")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CurrentPointId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Payer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("ReceiverAddressLat")
                        .HasColumnType("real");

                    b.Property<float>("ReceiverAddressLong")
                        .HasColumnType("real");

                    b.Property<string>("ReceiverDistrict")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverProvince")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverWard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("SenderAddressLat")
                        .HasColumnType("real");

                    b.Property<float>("SenderAddressLong")
                        .HasColumnType("real");

                    b.Property<string>("SenderDistrict")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderProvince")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderWard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPointId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MagicPostApi.Models.Point", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("AddressLat")
                        .HasColumnType("real");

                    b.Property<float>("AddressLong")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PointName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("MagicPostApi.Models.Trans_Gather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GatheringPointId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TransacionPointId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GatheringPointId");

                    b.HasIndex("TransacionPointId");

                    b.ToTable("Trans_Gathers");
                });

            modelBuilder.Entity("MagicPostApi.Models.User", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PointId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PointId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MagicPostApi.Models.Delivery", b =>
                {
                    b.HasOne("MagicPostApi.Models.Point", "FromPoint")
                        .WithMany()
                        .HasForeignKey("FromPointId");

                    b.HasOne("MagicPostApi.Models.Order", "Order")
                        .WithMany("Deliveries")
                        .HasForeignKey("OrderId");

                    b.HasOne("MagicPostApi.Models.Point", "ToPoint")
                        .WithMany()
                        .HasForeignKey("ToPointId");

                    b.Navigation("FromPoint");

                    b.Navigation("Order");

                    b.Navigation("ToPoint");
                });

            modelBuilder.Entity("MagicPostApi.Models.Item", b =>
                {
                    b.HasOne("MagicPostApi.Models.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("MagicPostApi.Models.Order", b =>
                {
                    b.HasOne("MagicPostApi.Models.Point", "CurrentPoint")
                        .WithMany()
                        .HasForeignKey("CurrentPointId");

                    b.Navigation("CurrentPoint");
                });

            modelBuilder.Entity("MagicPostApi.Models.Trans_Gather", b =>
                {
                    b.HasOne("MagicPostApi.Models.Point", "GatheringPoint")
                        .WithMany()
                        .HasForeignKey("GatheringPointId");

                    b.HasOne("MagicPostApi.Models.Point", "TransactionPoint")
                        .WithMany()
                        .HasForeignKey("TransacionPointId");

                    b.Navigation("GatheringPoint");

                    b.Navigation("TransactionPoint");
                });

            modelBuilder.Entity("MagicPostApi.Models.User", b =>
                {
                    b.HasOne("MagicPostApi.Models.Point", "Point")
                        .WithMany("Staffs")
                        .HasForeignKey("PointId");

                    b.Navigation("Point");
                });

            modelBuilder.Entity("MagicPostApi.Models.Order", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("MagicPostApi.Models.Point", b =>
                {
                    b.Navigation("Staffs");
                });
#pragma warning restore 612, 618
        }
    }
}
